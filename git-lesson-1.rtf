{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11940\viewh7800\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 INIT\
\
git init - creates repository\
\
PROJECT \
\
A Git project can be thought of as having three parts:\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}A Working Directory: where you'll be doing all the work: creating, editing, deleting and organizing files\
{\listtext	2.	}A Staging Area: where you'll list changes you make to the working directory\
{\listtext	3.	}A Repository: where Git permanently stores those changes as different versions of the project\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
WORKFLOW \
\
The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository. In Git, we save changes with a commit.\
\
STATUS\
\
As you write the screenplay, you will be changing the contents of the working directory. You can check the status of those changes with:\
\
git status\
\
In the output, notice the file in red under untracked files. Untracked means that Git sees the file but has not started tracking changes yet.\
\
TRACKING\
\
In order for Git to start tracking scene-1.txt, the file needs to be added to the staging area.\
\
ADDING \
\
We can add a file to the staging area with:\
\
git add filename\
\
The word filename here refers to the name of the file you are editing, such as scene-1.txt.\
\
1.\
Add scene-1.txt to the staging area in Git. Recall that you will need to identify the file by its name.\
2.\
Check the status of the project in Git.\
\
In the output, notice that Git indicates the changes to be committed with "new file: scene-1.txt" in green text. Here Git tells us the file was added to the staging area.\
\
Now add the file to the staging area.\
\
DIFFERENCES\
\
Imagine that we type another line in scene-1.txt. Since the file is tracked, we can check the differences between the working directory and the staging area with:\
\
git diff filename\
\
Here, filename is the actual name of the file. If the name of my file was changes.txt the command would be\
\
git diff changes.txt\
\
1.\
In the code editor, add this text to scene-1.txt:\
\
Dumblediff: I should've known you would be here, Professor McGonagit.\
Click Run.\
2.\
From the terminal, use the new command (git diff changes.txt) to check the difference between the working directory and the staging area.\
\
Notice the output:\
\
"Harry Programmer and the Sorcerer's Code: Scene 1" is in the staging area, as indicated in white.\
Changes to the file are marked with a + and are indicated in green.\
\
IMPORTANT: press q on your keyboard to exit diff mode.\
\
Add the changes to the staging area in Git. Recall that you will need to identify the file by its name. (git add)\
\
COMMIT\
\
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.\
\
git commit is the command we'll do next. However, one more bit of code is needed for a commit: the option -m followed by a message. Here's an example:\
\
git commit -m "Complete first line of dialogue"\
\
Standard Conventions for Commit Messages:\
\
Must be in quotation marks\
Written in the present tense\
Should be brief (50 characters or less) when using -m\
\
LOG\
\
Often with Git, you'll need to refer back an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:\
\
git log\
\
From the terminal, log a list of your commits.\
\
In the output, notice:\
\
A 40-character code, called a SHA, that uniquely identifies the commit. This appears in orange text.\
The commit author (you!)\
The date and time of the commit\
The commit message\
\
PROCESS\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\'95	}Git is the industry-standard version control system for web developers\
{\listtext	\'95	}Use Git commands to help keep track of changes made to a project:\
{\listtext	\'95	}git init creates a new Git repository\
{\listtext	\'95	}git status inspects the contents of the working directory and staging area\
{\listtext	\'95	}git add adds files from the working directory to the staging area\
{\listtext	\'95	}git diff shows the difference between the working directory and the staging area\
{\listtext	\'95	}git commit permanently stores file changes from the staging area in the repository\
{\listtext	\'95	}git log shows a list of all previous commits\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
MISC\
\
Committer: jorge <j0rg3@Macintosh.local>\
Your name and email address were configured automatically based\
on your username and hostname. Please check that they are accurate.\
You can suppress this message by setting them explicitly. Run the\
following command and follow the instructions in your editor to edit\
your configuration file:\
\
    git config --global --edit\
\
After doing this, you may fix the identity used for this commit with:\
\
    git commit --amend --reset-author\
\
====================================================================\
\
When file renamed, working with the \'93new\'94 file deletes the original one (because the same repository?)\
\
Macintosh:~ j0rg3$ git add desktop/git-lesson-1.rtf\
Macintosh:~ j0rg3$ git status\
On branch master\
Changes to be committed:\
  (use "git reset HEAD <file>..." to unstage)\
\
        new file:   desktop/git-lesson-1.rtf\
\
Changes not staged for commit:\
  (use "git add/rm <file>..." to update what will be committed)\
  (use "git checkout -- <file>..." to discard changes in working directory)\
\
        deleted:    Desktop/git lessons.rtf\
}